"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MAX_LOG_ENTRIES_COUNT = exports.RotatingLog = void 0;
const lodash_1 = __importDefault(require("lodash"));
const support_1 = require("appium/support");
const MAX_LOG_ENTRIES_COUNT = 10000;
exports.MAX_LOG_ENTRIES_COUNT = MAX_LOG_ENTRIES_COUNT;
class RotatingLog {
    constructor(showLogs = false, label = 'Log Label') {
        this.log = support_1.logger.getLogger(label);
        this.showLogs = showLogs;
        this.logs = [];
        this.logIdxSinceLastRequest = 0;
        this.isCapturing = false;
    }
    // eslint-disable-next-line require-await
    async startCapture() {
        this.isCapturing = true;
    }
    // eslint-disable-next-line require-await
    async stopCapture() {
        this.isCapturing = false;
    }
    /**
     * @privateRemarks Subclasses must implement this.
     */
    addLogLine() {
        throw new Error('Not implemented');
    }
    // eslint-disable-next-line require-await
    async getLogs() {
        if (this.logs.length && this.logIdxSinceLastRequest < this.logs.length) {
            let result = this.logs;
            if (this.logIdxSinceLastRequest > 0) {
                result = result.slice(this.logIdxSinceLastRequest);
            }
            this.logIdxSinceLastRequest = this.logs.length;
            return result;
        }
        return [];
    }
    // eslint-disable-next-line require-await
    async getAllLogs() {
        return lodash_1.default.clone(this.logs);
    }
    get logs() {
        if (!this._logs) {
            this.logs = [];
        }
        return this._logs;
    }
    set logs(logs) {
        this._logs = logs;
    }
}
exports.RotatingLog = RotatingLog;
exports.default = RotatingLog;
//# sourceMappingURL=rotating-log.js.map