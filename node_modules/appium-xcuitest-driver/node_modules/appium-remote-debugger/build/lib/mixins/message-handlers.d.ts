export default messageHandlers;
declare namespace messageHandlers {
    export { onPageChange };
    export { onAppConnect };
    export { onAppDisconnect };
    export { onAppUpdate };
    export { onConnectedDriverList };
    export { onCurrentState };
    export { onConnectedApplicationList };
}
/**
 * @this {import('../remote-debugger').RemoteDebugger}
 * @param {Error?} err
 * @param {string} appIdKey
 * @param {Record<string, any>} pageDict
 * @returns {Promise<void>}
 */
declare function onPageChange(this: import("../remote-debugger").default, err: Error | null, appIdKey: string, pageDict: Record<string, any>): Promise<void>;
/**
 * @this {import('../remote-debugger').RemoteDebugger}
 * @param {Error?} err
 * @param {Record<string, any>} dict
 * @returns {Promise<void>}
 */
declare function onAppConnect(this: import("../remote-debugger").default, err: Error | null, dict: Record<string, any>): Promise<void>;
/**
 * @this {import('../remote-debugger').RemoteDebugger}
 * @param {Error?} err
 * @param {Record<string, any>} dict
 * @returns {void}
 */
declare function onAppDisconnect(this: import("../remote-debugger").default, err: Error | null, dict: Record<string, any>): void;
declare class onAppDisconnect {
    /**
     * @this {import('../remote-debugger').RemoteDebugger}
     * @param {Error?} err
     * @param {Record<string, any>} dict
     * @returns {void}
     */
    constructor(this: import("../remote-debugger").default, err: Error | null, dict: Record<string, any>);
    appIdKey: string | undefined;
    connected: boolean | undefined;
}
/**
 * @this {import('../remote-debugger').RemoteDebugger}
 * @param {Error?} err
 * @param {Record<string, any>} dict
 * @returns {Promise<void>}
 */
declare function onAppUpdate(this: import("../remote-debugger").default, err: Error | null, dict: Record<string, any>): Promise<void>;
/**
 * @this {import('../remote-debugger').RemoteDebugger}
 * @param {Error?} err
 * @param {Record<string, any>} drivers
 * @returns {void}
 */
declare function onConnectedDriverList(this: import("../remote-debugger").default, err: Error | null, drivers: Record<string, any>): void;
declare class onConnectedDriverList {
    /**
     * @this {import('../remote-debugger').RemoteDebugger}
     * @param {Error?} err
     * @param {Record<string, any>} drivers
     * @returns {void}
     */
    constructor(this: import("../remote-debugger").default, err: Error | null, drivers: Record<string, any>);
    connectedDrivers: any;
}
/**
 * @this {import('../remote-debugger').RemoteDebugger}
 * @param {Error?} err
 * @param {Record<string, any>} state
 * @returns {void}
 */
declare function onCurrentState(this: import("../remote-debugger").default, err: Error | null, state: Record<string, any>): void;
declare class onCurrentState {
    /**
     * @this {import('../remote-debugger').RemoteDebugger}
     * @param {Error?} err
     * @param {Record<string, any>} state
     * @returns {void}
     */
    constructor(this: import("../remote-debugger").default, err: Error | null, state: Record<string, any>);
    currentState: any;
}
/**
 * @this {import('../remote-debugger').RemoteDebugger}
 * @param {Error?} err
 * @param {Record<string, any>} apps
 * @returns {Promise<void>}
 */
declare function onConnectedApplicationList(this: import("../remote-debugger").default, err: Error | null, apps: Record<string, any>): Promise<void>;
//# sourceMappingURL=message-handlers.d.ts.map