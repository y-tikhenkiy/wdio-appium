declare namespace _default {
    export { setConnectionKey };
    export { connect };
    export { disconnect };
    export { selectApp };
    export { searchForApp };
    export { searchForPage };
    export { selectPage };
    export { updateAppsWithDict };
}
export default _default;
export type AppPages = {
    appIdKey: string;
    pageDict: Record<string, any>;
};
export type App = {
    id: string;
    bundleId: string;
};
/**
 * @typedef {Object} AppPages
 * @property {string} appIdKey
 * @property {Record<string, any>} pageDict
 */
/**
 * @typedef {Object} App
 * @property {string} id
 * @property {string} bundleId
 */
/**
 *
 * @this {import('../remote-debugger').RemoteDebugger}
 */
declare function setConnectionKey(this: import("../remote-debugger").default): Promise<void>;
/**
 *
 * @this {import('../remote-debugger').RemoteDebugger}
 */
declare function connect(this: import("../remote-debugger").default, timeout?: number): Promise<Record<string, any>>;
/**
 *
 * @this {import('../remote-debugger').RemoteDebugger}
 * @returns {Promise<void>}
 */
declare function disconnect(this: import("../remote-debugger").default): Promise<void>;
/**
 *
 * @this {import('../remote-debugger').RemoteDebugger}
 * @param {string?} currentUrl
 * @param {number} [maxTries]
 * @param {boolean} [ignoreAboutBlankUrl]
 * @returns {Promise<AppPages[]>}
 */
declare function selectApp(this: import("../remote-debugger").default, currentUrl?: string | null, maxTries?: number | undefined, ignoreAboutBlankUrl?: boolean | undefined): Promise<AppPages[]>;
declare class selectApp {
    /**
     *
     * @this {import('../remote-debugger').RemoteDebugger}
     * @param {string?} currentUrl
     * @param {number} [maxTries]
     * @param {boolean} [ignoreAboutBlankUrl]
     * @returns {Promise<AppPages[]>}
     */
    constructor(this: import("../remote-debugger").default, currentUrl?: string | null, maxTries?: number | undefined, ignoreAboutBlankUrl?: boolean | undefined);
    appIdKey: any;
}
/**
 *
 * @this {import('../remote-debugger').RemoteDebugger}
 * @param {string?} currentUrl
 * @param {number} maxTries
 * @param {boolean} ignoreAboutBlankUrl
 * @returns {Promise<AppPages?>}
 */
declare function searchForApp(this: import("../remote-debugger").default, currentUrl: string | null, maxTries: number, ignoreAboutBlankUrl: boolean): Promise<AppPages | null>;
/**
 *
 * @this {import('../remote-debugger').RemoteDebugger}
 * @param {Record<string, any>} appsDict
 * @param {string?} currentUrl
 * @param {boolean} [ignoreAboutBlankUrl]
 * @returns {AppPages?}
 */
declare function searchForPage(this: import("../remote-debugger").default, appsDict: Record<string, any>, currentUrl?: string | null, ignoreAboutBlankUrl?: boolean | undefined): AppPages | null;
/**
 *
 * @this {import('../remote-debugger').RemoteDebugger}
 * @param {string} appIdKey
 * @param {string} pageIdKey
 * @param {boolean} [skipReadyCheck]
 * @returns {Promise<void>}
 */
declare function selectPage(this: import("../remote-debugger").default, appIdKey: string, pageIdKey: string, skipReadyCheck?: boolean | undefined): Promise<void>;
declare class selectPage {
    /**
     *
     * @this {import('../remote-debugger').RemoteDebugger}
     * @param {string} appIdKey
     * @param {string} pageIdKey
     * @param {boolean} [skipReadyCheck]
     * @returns {Promise<void>}
     */
    constructor(this: import("../remote-debugger").default, appIdKey: string, pageIdKey: string, skipReadyCheck?: boolean | undefined);
    appIdKey: string;
    pageIdKey: string;
}
/**
 *
 * @this {import('../remote-debugger').RemoteDebugger}
 * @param {Record<string, any>} dict
 * @returns {void}
 */
declare function updateAppsWithDict(this: import("../remote-debugger").default, dict: Record<string, any>): void;
declare class updateAppsWithDict {
    /**
     *
     * @this {import('../remote-debugger').RemoteDebugger}
     * @param {Record<string, any>} dict
     * @returns {void}
     */
    constructor(this: import("../remote-debugger").default, dict: Record<string, any>);
    appDict: Record<string, any>;
    appIdKey: string | undefined;
}
//# sourceMappingURL=connect.d.ts.map