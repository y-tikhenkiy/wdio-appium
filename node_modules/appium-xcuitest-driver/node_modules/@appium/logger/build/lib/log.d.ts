/// <reference types="node" />
/// <reference types="node" />
import { EventEmitter } from 'node:events';
import type { MessageObject, StyleObject, Logger, LogLevel } from './types';
import type { Writable } from 'node:stream';
export declare class Log extends EventEmitter implements Logger {
    level: LogLevel | string;
    record: MessageObject[];
    maxRecordSize: number;
    prefixStyle: StyleObject;
    headingStyle: StyleObject;
    heading: string;
    stream: Writable;
    _colorEnabled?: boolean;
    _buffer: MessageObject[];
    _style: Record<LogLevel | string, StyleObject | undefined>;
    _levels: Record<LogLevel | string, number>;
    _disp: Record<LogLevel | string, number | string>;
    _id: number;
    _paused: boolean;
    constructor();
    private useColor;
    enableColor(): void;
    disableColor(): void;
    enableUnicode(): void;
    disableUnicode(): void;
    enableProgress(): void;
    disableProgress(): void;
    progressEnabled(): boolean;
    /**
     * Temporarily stop emitting, but don't drop
     */
    pause(): void;
    resume(): void;
    silly(prefix: string, message: any, ...args: any[]): void;
    verbose(prefix: string, message: any, ...args: any[]): void;
    info(prefix: string, message: any, ...args: any[]): void;
    timing(prefix: string, message: any, ...args: any[]): void;
    http(prefix: string, message: any, ...args: any[]): void;
    notice(prefix: string, message: any, ...args: any[]): void;
    warn(prefix: string, message: any, ...args: any[]): void;
    error(prefix: string, message: any, ...args: any[]): void;
    silent(prefix: string, message: any, ...args: any[]): void;
    addLevel(level: string, n: number, style?: StyleObject, disp?: string): void;
    /**
     * Creates a log message
     * @param level
     * @param prefix
     * @param message message of the log which will be formatted using utils.format()
     * @param args additional arguments appended to the log message also formatted using utils.format()
     */
    log(level: LogLevel | string, prefix: string, message: any, ...args: any[]): void;
    private emitLog;
    private _format;
    private write;
    private initDefaultLevels;
    private clearProgress;
    private showProgress;
}
export declare const GLOBAL_LOG: Log;
export default GLOBAL_LOG;
//# sourceMappingURL=log.d.ts.map